



nano Stack.h







ls -la
/**
*	@file : Stack.hpp
*	@author :  Stephen Longofono
*	@date : 02-25-2015
*	Purpose: Implementation of Stack.h
*/

template<typename T>
Stack<T>::Stack(): StackInterface();

template<typename T>
virtual bool StackInterFace<T>::isEmpty()const{
	return (m_size <= 0);
}

template<typename T>
virtual void StackInterface<T>::push(const T& newEntry){
	Node<T>* n = new Node();
	n->setValue(newEntry);
	m_size++;
	n->setNext(m_top);
	m_top = n;
}

template<typename T>
virtual T StackInterface<T>::pop() throw(PreconditionViolationException){
	
	if(isEmpty()){
		throw(PreconditionViolationException("Destack attempted on an empty stack\n"));
	}
	else{

		Node<T>* n = (m_top->getNext());
		T temp = (m_top->getvalue());
		delete m_top;
		m_size--;
		m_top = n;
		return temp;
	}
}

template<typename T>
virtual T StackInterface<T>::peek() const throw(PreconditionViolationException){

	if(isEmpty()){
		throw(PreconditionViolationException("Peek attempted on an empty stack\n"));
	}

	else{
		return (m_top->getValue());
	}
}

template<typename T>
virtual int StackInterface<T>::size() const{
	return m_size;
}

template<typename T>
Node<T>* getBack()const{

	if(m_size<=0){
		return nullptr;
	}
	else{
		Node<T>* temp = m_top;	
		for(int i = 0; i<m_size; i++){
			temp = temp->getNext();
		}
	}	
	return temp;
}

template<typename T>
virtual void StackInterface<T>::print()const{
	Node<T>* temp = getBack();
	if(temp==nullptr){
		std::cout<<"Stack Empty\n";
	}
	else{
		while(temp!=nullptr){
			std::cout<<temp->getValue();
			temp = temp->getNext();
		}
		std::cout<<temp->getValue();
	}
}
